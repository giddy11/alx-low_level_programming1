void rev_string(char *n)
{
	int i = 0;
	int j = 0;
	char temp;

	while (*(n + i) != '\0')
	{
		i++;
	}
	i--;

	for (j = 0; j < i; j++, i--)
	{
		temp = *(n + j);
		*(n + j) = *(n + i);
		*(n + i) = temp;
	}
}

/**
 * infinite_add - add 2 numbers together
 * @n1: text representation of 1st number to add
 * @n2: text representation of 2nd number to add
 * @r: pointer to buffer
 * @size_r: buffer size
 * Return: pointer to calling function
 */

char *infinite_add(char *n1, char *n2, char *r, int size_r)
{
	int overflow = 0, i = 0, j = 0, digits = 0;
	int val1 = 0, val2 = 0, temp_tot = 0;

	while (*(n1 + i) != '\0')
		i++;
	while (*(n2 + j) != '\0')
		j++;
	i--;
	j--;
	if (j >= size_r || i >= size_r)
		return (0);
	while (j >= 0 || i >= 0 || overflow == 1)
	{
		if (i < 0)
			val1 = 0;
		else
			val1 = *(n1 + i) - '0';
		if (j < 0)
			val2 = 0;
		else
			val2 = *(n2 + j) - '0';
		temp_tot = val1 + val2 + overflow;
		if (temp_tot >= 10)
			overflow = 1;
		else
			overflow = 0;
		if (digits >= (size_r - 1))
			return (0);
		*(r + digits) = (temp_tot % 10) + '0';
		digits++;
		j--;
		i--;
	}
	if (digits == size_r)
		return (0);
	*(r + digits) = '\0';
	rev_string(r);
	return (r);
}


char *infinite_add(char *n1, char *n2, char *r, int size_r) {
    int carry = 0;
    int len1 = 0;
    int len2 = 0;
    int i = 0;
    int j = 0;
    int k = 0;
    
    // Calculate length of n1
    while (n1[len1] != '\0') {
        len1++;
    }
    
    // Calculate length of n2
    while (n2[len2] != '\0') {
        len2++;
    }
    
    // Check if result can be stored in r
    if (len1 + len2 + 1 > size_r) {
        return 0;
    }
    
    // Add digits from right to left
    for (i = len1 - 1, j = len2 - 1, k = len1 + len2; i >= 0 || j >= 0; i--, j--, k--) {
        int digit1 = i >= 0 ? n1[i] - '0' : 0;
        int digit2 = j >= 0 ? n2[j] - '0' : 0;
        int sum = digit1 + digit2 + carry;
        carry = sum / 10;
        r[k - 1] = '0' + (sum % 10);
    }
    
    // Add final carry, if any
    if (carry != 0) {
        r[k - 1] = '0' + carry;
        k--;
    }
    
    // Shift result to beginning of r
    for (i = 0; k < size_r && i < len1 + len2; i++, k++) {
        r[i] = r[k];
    }
    
    // Null-terminate result
    r[i] = '\0';
    
    // Return result pointer
    return r;
}

char *infinite_add(char *n1, char *n2, char *r, int size_r) {
    int carry = 0;
    int len1 = 0;
    int len2 = 0;
    int i = 0;
    int j = 0;
    int k = 0;

    // Calculate length of n1
    while (n1[len1] != '\0') {
        len1++;
    }

    // Calculate length of n2
    while (n2[len2] != '\0') {
        len2++;
    }

    // Check if result can be stored in r
    if (len1 + len2 > size_r - 1) {
        return NULL;
    }

    // Add digits from right to left
    for (i = len1 - 1, j = len2 - 1, k = size_r - 1; i >= 0 || j >= 0; i--, j--, k--) {
        int digit1 = i >= 0 ? n1[i] - '0' : 0;
        int digit2 = j >= 0 ? n2[j] - '0' : 0;
        int sum = digit1 + digit2 + carry;
        carry = sum / 10;
        r[k] = '0' + (sum % 10);
    }

    // Add final carry, if any
    if (carry != 0) {
        if (k == 0) {
            return NULL;
        }
        r[k] = '0' + carry;
        k--;
    }

    // Shift result to beginning of r
    int offset = size_r - k - 1;
    for (i = 0; i <= k; i++) {
        r[i] = r[i + offset];
    }

    // Null-terminate result
    r[k + 1] = '\0';

    // Return result pointer
    return r;
}
char *infinite_add(char *n1, char *n2, char *r, int size_r)
{
        int i, j, k, len1, len2, carry;

        while (n1[len1] != '\0')
        {
                len1++;
        }
        
        while (n2[len2] != '\0')
        {
                len2++;
        }

        // if (len1 + len2 + 1 > size_r)
        // {
        //         return (0);
        // }
        if (len1 >= size_r || len2 >= size_r)
        {
                return (0);
        }
        

        for (i = len1 - 1, j = len2 - 1, k = len1 + len2; i >= 0 || j >= 0; i--)
        {
                int digit1 = i >= 0 ? n1[i] - '0' : 0;
                int digit2 = j >= 0 ? n2[j] - '0' : 0;
                int sum = digit1 + digit2 + carry;

                carry = sum / 10;

                r[k-1] = '0' + (sum % 10);
                j--, k--;
        }

        if (carry != 0)
        {
                r[k - 1] = '0' + carry;
                k--;
        }

        for(i = 0; k < size_r && i < len1 + len2; i++, k++)
        {
                r[i] = r[k];
        }

        r[i] = '\0';

        return r;        
}


char *infinite_add(char *n1, char *n2, char *r, int size_r)
{
        int i, j, k, len1, len2, carry;

        while (n1[len1] != '\0')
        {
                len1++;
        }
        
        while (n2[len2] != '\0')
        {
                len2++;
        }

        if (len1 + len2 + 1 > size_r)
        {
                return (0);
        }

        for (i = len1 - 1, j = len2 - 1, k = len1 + len2; i >= 0 || j >= 0; i--, j--, k--)
        {
                int digit1 = i >= 0 ? n1[i] - '0' : 0;
                int digit2 = j >= 0 ? n2[j] - '0' : 0;
                int sum = digit1 + digit2 + carry;

                carry = sum / 10;

                r[k-1] = '0' + (sum % 10);
        }

        if (carry != 0)
        {
                r[k - 1] = '0' + carry;
                k--;
        }

        for(i = 0; k < size_r && i < len1 + len2; i++, k++)
        {
                r[i] = r[k];
        }

        r[i] = '\0';

        return r;        
}

